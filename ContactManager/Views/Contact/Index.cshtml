@using ContactManager.Common.Model
@model IEnumerable<ContactDTO>
@{
    ViewData["Title"] = "Contact Page";
}
<style>
    .map {
        height: 300px; /* Adjust height as needed */
        width: auto; /* Ensure full width */
        position: relative; /* Ensure proper positioning */
        overflow: hidden; /* Ensure overflow is hidden */
        margin-top:10px;
        margin-bottom:10px;
    }

    .pac-container {
        z-index: 10000; /* Ensure a high enough z-index */
    }
</style>
<p>
    <a asp-action="Create" class="btn btn-primary" target="_blank">Create Contact</a>
</p>
<input type="text" id="searchInput" class="form-control" placeholder="Search for contacts...">
<table class="table table-striped">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Address</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="contactsTable">
        @foreach (var contact in Model)
        {
            <tr>
                <td>@contact.FirstName</td>
                <td>@contact.LastName</td>
                <td>@contact.Email</td>
                <td>@contact.Address</td>
                <td>
                    <button asp-action="Details" data-contact-id="@contact.Id"  class="btn btn-info btnView">View</button>
                    <button class="btn btn-danger btnDelete" data-contact-id="@contact.Id" id="">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="modal" id="deleteConfirmationModal" tabindex="-1">
    <input type="hidden" id="ToDelete" />
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Delete Contact</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this contact?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="btnConfirmDelete">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="ViewModal" tabindex="-1">

    <div class="modal-dialog">
        <form id="contactUpdateForm" method="post">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmationModalLabel">Contact Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="toUpdate" name="Id" />

                    <div class="form-group">
                        <label for="contactFirstName">First Name</label>
                        <input type="text" class="form-control" id="contactFirstName" name="FirstName">
                    </div>
                    <div class="form-group">
                        <label for="contactLastName">Last Name</label>
                        <input type="text" class="form-control" id="contactLastName" name="LastName">
                    </div>
                    <div class="form-group">
                        <label for="contactEmail">Email</label>
                        <input type="email" class="form-control" id="contactEmail" name="Email">
                    </div>
                    <div class="form-group">
                        <label for="contactEmail">Address</label>
                        <input type="text" class="form-control addressMapper" id="contactAddress " name="Address">
                    </div>

                   
                    <!-- Add more fields as needed -->
                    <div class="map"></div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" id="btnUpdate">
                        Save
                    </button>
                </div>
            </div>
        </form>
    </div>

    </div>
 


    @section Scripts {
        <script>
        $('#contactUpdateForm').submit(function (e) {
                e.preventDefault();

                $.ajax({
                    url: '/Contact/Create',
                    type: 'POST',
                    dataType: 'json',
                    data: $(this).serialize(),
                    success: function (data) {
                        if (data.success) {
                            alert('Contact Updated successfully');
                            $('#ViewModal').modal('hide');
                            location.reload();
                        } else {
                            alert("Error: " + data.message);
                        }
                    },
                    error: function () {
                        // Handle Ajax request errors
                        alert("An error occurred. Please try again.");
                    }
                });
            });

        // Search functionality
        $('#searchInput').on('keyup', function () {
            var value = $(this).val().toLowerCase();
            $('#contactsTable tr').filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
            });
        });

            // Handle Delete button click to show confirmation modal
            $('.btnDelete').click(function () {
                var contactId = $(this).data('contact-id');

                $("#ToDelete").val(contactId)
                $('#deleteConfirmationModal').modal('show');
            });
            $('#btnConfirmDelete').click(function () {
                var contactId = $("#ToDelete").val();

                $.ajax({
                    url: '@Url.Action("Delete", "Contact")' + '?id=' + contactId,
                    type: 'POST',
                    dataType: 'json',
                    success: function (data) {
                        if (data.success) {
                        alert('Contact Deleted successfully');
                        location.reload();
                        } else {
                            // Handle deletion failure or error
                            alert('Error: ' + data.message);
                        }
                    },
                    error: function () {
                        // Handle server error
                        alert('An error occurred. Please try again.');
                    }
                });
            });

            $('.btnView').click(function () {
                var contactId = $(this).data('contact-id');
                openContactModal(contactId);
            });
            function openContactModal(contactId) {
                // AJAX request to fetch contact details
                $.ajax({
                    url: '/Contact/Details/' + contactId,
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        // Populate modal with contact data
                        console.log(data);

                        $('#toUpdate').val(data.id);
                        $('#contactFirstName').val(data.firstName);
                        $('#contactLastName').val(data.lastName);
                        $('#contactEmail').val(data.email);
                        $('#contactAddress').val(data.address);
                        // Populate other fields as needed
                        // Show the modal
                        initMap(data.address);
                        $('#ViewModal').modal('show');
                    },
                    error: function () {
                        alert('Failed to fetch contact details.');
                    }
                });
            }

 
        function initMap(initialAddress=null) {
            var mapElements = document.getElementsByClassName('map');
            var addressInputs = document.getElementsByClassName('addressMapper');

            // Loop through all elements with class 'map'
            for (var i = 0; i < mapElements.length; i++) {
                var mapElement = mapElements[i];
                var addressInput = addressInputs[i];

                var map = new google.maps.Map(mapElement, {
                    center: { lat: -34.397, lng: 150.644 },
                    zoom: 8
                });

                var marker = new google.maps.Marker({
                    map: map,
                    draggable: true,
                    animation: google.maps.Animation.DROP
                });


                   if (initialAddress) {
                       // Set initial marker position based on initialAddress
                       var geocoder = new google.maps.Geocoder();
                       geocoder.geocode({ 'address': initialAddress }, function (results, status) {
                           if (status === 'OK') {
                               map.setCenter(results[0].geometry.location);
                               marker.setPosition(results[0].geometry.location);
                               marker.setVisible(true);
                           } else {
                               console.error('Geocode was not successful for the following reason: ' + status);
                           }
                       });
                   }

                var autocomplete = new google.maps.places.Autocomplete(addressInput, { types: ['geocode'] });


                autocomplete.addListener('place_changed', function () {
                    var place = autocomplete.getPlace();
                    if (!place.geometry) {
                        return;
                    }

                    if (place.geometry.viewport) {
                        map.fitBounds(place.geometry.viewport);
                    } else {
                        map.setCenter(place.geometry.location);
                        map.setZoom(17);
                    }

                    marker.setPosition(place.geometry.location);
                    marker.setVisible(true);
                });
            }
        }


        // function initMap() {

        //     map = new google.maps.Map(document.getElementById('map'), {
        //         center: { lat: -34.397, lng: 150.644 },
        //         zoom: 8
        //     });

        //     marker = new google.maps.Marker({
        //         map: map,
        //         draggable: true,
        //         animation: google.maps.Animation.DROP
        //     });

        //     var autocomplete = new google.maps.places.Autocomplete(
        //         document.getElementsByClassName('addressMapper'),
        //         { types: ['geocode'] }
        //     );

        //     autocomplete.addListener('place_changed', function () {

        //         var place = autocomplete.getPlace();
        //         if (!place.geometry) {
        //             return;
        //         }

        //         if (place.geometry.viewport) {
        //             map.fitBounds(place.geometry.viewport);
        //         } else {
        //             map.setCenter(place.geometry.location);
        //             map.setZoom(17);
        //         }

        //         marker.setPosition(place.geometry.location);
        //         marker.setVisible(true);
        //     });
        // }

        </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC5N8RM2dWX4-wTYXpDNdWBGIFL_0dzI4g&libraries=places&callback=initMap" async defer></script>

   }
